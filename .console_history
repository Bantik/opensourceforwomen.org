u.properties.map(&:name).uniq.count
u.properties.map(&:id).uniq.count
u = User.lat
u.business_entities
exot
Program.last
u = User.lst
u = User.all.last
u - User.last
u = User.last
tree.result
tree.results
tree.nodes
tree.user.properties.where(name: tree.property_name)
tree = Api::V2::ListingTreeSearch.new
tree.user_id = 43
tree.property_name = "Carl"
tree.send(:user).properties.where(name: tree.property_name)
u.properties.first
u.properties.last
u = User.all[-2]
Property.where(id: PropertyListing.all.pluck(&:property_id).uniq)
Property.where(id: PropertyListing.all.pluck(&:property_id).compact.uniq)
PropertyListing.distinct(&:property_id)
PropertyListing.select(&:property_id)
PropertyListing.distinct(&:property_id)PropertyListing.all.pluck(&:property_id).map(&:property_id).uniq
PropertyListing.all.pluck(&:property_id).map(&:property_id).uniq
PropertyListing.pluck(&:property_id).map(&:property_id).uniq
PropertyListing.all.pluck(&:property_id)#.map(&:property_id).uniq
PropertyListing.all.pluck(&:property_id).flatten.map(&:property_id).uniq
PropertyListing.all.pluck(&:property_id).flatten.uniq
PropertyListing.all.pluck(&:property_id).flatten.map(&:property_id)
s1 = PropertyListing.all.pluck(&:property_id)#.flatten.map(&:property_id)
s2 = s1.flatten.map(&:property_id)
s2
s1
s1 = PropertyListing.all.only(&:property_id)#.flatten.map(&:property_id)
s1 = PropertyListing.all.only(&:property_id).flatten.map(&:property_id)
Property.where(property_id: PropertyListing.all.only(&:property_id).flatten.map(&:property_id)).count
u.assigned_to_all_properties?
u.assignments.map(&:assign_to_all).uniq
u.properties.count
p = Property.find(8056)
p.business_entities.map(&:id)
a = Assignment.last
PropertyListing.where(listing_no: 8001).count
PropertyListing.where(listing_no: 8025).count
u
u.id
u._ud
u._id
u.object_id
xit
Property.last
u = User.all[-3]
u = User.all[-4]
u.properties
pl.property
p = _
p.listings
PropertyListing.last
pl = _
p = pl.properties.first
p.users
Listing
Assignment
Assignment.last
Assignment.all.map(&:listing_no)
pl = PropertyListing.last
p = pl.property
Gibbon::API.new.lists
Gibbon::API.new.lists/opens
Gibbon::API.new.lists['opensourceforwomen']
Gibbon::API.new.lists.opensourceforwomen
Gibbon::API.new.lists[0]n
Gibbon::API.new.lists[0]
Gibbon::API.new.lists[:opensourceforwomen]
Gibbon::API.new.lists(:opensourceforwomen)
Gibbon::API.new.list_subscribe(:id => default_mailing_list_id, :email_address => 'coraline@idolhands.com')
Gibbon::API.new.list_subscribe(:id => "ae537a59f9", :email_address => 'coraline@idolhands.com')
reload!
s = Subscription.new
s.email = 'coraline@idolhands.com'
s.valid?
s.errors
Subscription.last
exit
email = "cehmke@apartments.com"
Gibbon::API.new.subscribe(:id => "ae537a59f9", :email_address => email
g = _
g.response
gb = Gibbon::API.new
list_name = "Open Source for Women"
email = "cehmpartments.com"
list = gb.lists.list({:filters => {:list_name => list_name}})
Gibbon::API.new.subscribe(:id => "ae537a59f9", :email_address => email)
gb.subsribe(:id => "ae537a59f9", :email_address => email)
gb.subscribe(:id => "ae537a59f9", :email_address => email)
Subscriptions.delete_all
Subscription.delete_all
